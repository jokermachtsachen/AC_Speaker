# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'statistics_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sys
import matplotlib.pyplot as plt
from matplotlib.figure import Figure
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
import pyqtgraph as pg
import numpy as np

import analyze_file as af

from functools import partial


# def clicked_pauses():
#    print("clicked pauses!!")

class Ui_statistics_window(object):
    def setupUi(self, statistics_window):
        results = af.open_and_analyse_file()
        # save results of the analsis of the whole file in whole
        self.whole = results[0]
        # save results of the analysis of the sections
        self.sections = results[1]

        statistics_window.setWindowTitle("Analysis")
        statistics_window.setObjectName("statistics_window")
        statistics_window.resize(531, 579)

        self.graphicsStatistik = pg.PlotWidget(statistics_window)
        self.graphicsStatistik.setGeometry(QtCore.QRect(20, 260, 491, 301))
        self.graphicsStatistik.setObjectName("graphicsStatistik")

        self.textStatistic = QtWidgets.QTextBrowser(statistics_window)
        self.textStatistic.setGeometry(QtCore.QRect(20, 90, 491, 151))
        self.textStatistic.setObjectName("textStatistic")

        self.horizontalLayoutWidget = QtWidgets.QWidget(statistics_window)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(20, 30, 491, 51))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")

        self.button_pauses = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.button_pauses.setObjectName("button_pauses")
        self.horizontalLayout.addWidget(self.button_pauses)
        self.button_pauses.clicked.connect(self.show_pause_statistic)

        self.button_rate_of_speech = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.button_rate_of_speech.setObjectName("button_rate_of_speech")
        self.horizontalLayout.addWidget(self.button_rate_of_speech)
        self.button_rate_of_speech.clicked.connect(self.show_rate_of_speech_statistic)

        self.button_balance = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.button_balance.setObjectName("button_balance")
        self.horizontalLayout.addWidget(self.button_balance)
        self.button_balance.clicked.connect(self.show_balance_statistic)

        self.button_intensity = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.button_intensity.setObjectName("button_intensity")
        self.horizontalLayout.addWidget(self.button_intensity)
        self.button_intensity.clicked.connect(self.show_intensity_statistic)

        self.button_fillers = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.button_fillers.setObjectName("button_fillers")
        self.horizontalLayout.addWidget(self.button_fillers)
        self.button_fillers.clicked.connect(self.show_fillers_statistic)

        self.button_mood = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.button_mood.setObjectName("button_mood")
        self.horizontalLayout.addWidget(self.button_mood)
        self.button_mood.clicked.connect(self.show_mood_statistic)

        self.retranslateUi(statistics_window)
        QtCore.QMetaObject.connectSlotsByName(statistics_window)

    def retranslateUi(self, statistics_window):
        _translate = QtCore.QCoreApplication.translate
        statistics_window.setWindowTitle(_translate("statistics_window", "Dialog"))
        self.button_pauses.setText(_translate("statistics_window", "Pausen"))
        self.button_rate_of_speech.setText(_translate("statistics_window", "Geschwindigkeitslevel"))
        self.button_balance.setText(_translate("statistics_window", "Balance"))
        self.button_mood.setText(_translate("statistics_window", "Stimmung"))
        self.button_intensity.setText(_translate("statistics_window", "Lautstärke"))

    def show_pause_statistic(self):
        self.textStatistic.setText("Die gesamte Anzahl der Pausen: " + str(self.whole["pauses"]))
        self.textStatistic.append(
            "Die durchschnittliche Längen der Pausen: " + "%.2f secs" % (self.whole["mean_of_pauses"]))
        # https://www.learnpyqt.com/courses/graphics-plotting/plotting-pyqtgraph/
        # todo wahrscheinlich waere eine Funktion angbracht
        pauses_sections = []
        mean_pauses_sections = []
        sections = []
        for i, section_parameter in enumerate(self.sections):
            section = i + 1
            pauses_sections.append(section_parameter["pauses"])
            mean_pauses_sections.append(section_parameter["mean_of_pauses"])
            sections.append(section)

        self.graphicsStatistik.plotItem.clear()
        self.graphicsStatistik.plot(sections, pauses_sections)
        self.graphicsStatistik.plot(sections, mean_pauses_sections, pen='r')
        self.graphicsStatistik.setLabel('left', 'Pausen')
        # self.graphicsStatistik.setLabel('left', 'Pausenlänge', pen='r')
        self.graphicsStatistik.setLabel('bottom', 'Abschnitte')

    def show_rate_of_speech_statistic(self):
        self.textStatistic.setText("Rate of Speech der gesamten Rede: " + str(self.whole["rate_of_speech"]))
        # gib plot an self.graphicsStatistik
        rate_sections = []
        sections = []
        for i, section_parameter in enumerate(self.sections):
            section = i + 1
            rate_sections.append(section_parameter["rate_of_speech"])
            sections.append(section)
        self.graphicsStatistik.plotItem.clear()
        self.graphicsStatistik.plot(sections, rate_sections)
        self.graphicsStatistik.setLabel('left', 'Geschwindigkeitslevel')
        self.graphicsStatistik.setLabel('bottom', 'Abschnitte')

        self.textStatistic.append("Mit einer Geschwindigkeit von " + str(min(rate_sections)) + " ist Abschnitt "
                                  + str(sections[rate_sections.index(min(rate_sections))]) + " der langsamste")

    def show_balance_statistic(self):
        self.textStatistic.setText("Balance der gesamten Rede: " + str(self.whole["balance"]))
        # gib plot an self.graphicsStatistik
        balance_sections = []
        sections = []
        for i, section_parameter in enumerate(self.sections):
            section = i + 1
            balance_sections.append(section_parameter["balance"])
            sections.append(section)

        self.graphicsStatistik.plotItem.clear()
        self.graphicsStatistik.plot(sections, balance_sections)
        self.graphicsStatistik.setLabel('left', 'Balance')
        self.graphicsStatistik.setLabel('bottom', 'Sections')

    def show_intensity_statistic(self):
        self.textStatistic.setText(
            "Die durchschnittliche Lautstärke der gesprochenen Rede war: %.2f dB" % self.whole["mean_intensity"])
        # gib plot an self.graphicsStatistik
        mean_intensity = []
        sections = []
        for i, section_parameter in enumerate(self.sections):
            section = i + 1
            mean_intensity.append(section_parameter["mean_intensity"])
            sections.append(section)
        self.graphicsStatistik.plotItem.clear()
        self.graphicsStatistik.plot(sections, mean_intensity)
        self.graphicsStatistik.setLabel('left', 'Lautstärke [dB]')
        self.graphicsStatistik.setLabel('bottom', 'Abschnitte')

    def show_fillers_statistic(self):
        self.textStatistic.setText(
            "Die Anzahl der Füllwörter: %.2f dB" % self.whole[["filled_pauses"]])
        self.textStatistic.append("Das am öftersten genutzte Füllwort: " + self.whole["most_used_fillers"])

    def show_mood_statistic(self):
        self.textStatistic.setText("Stimmung der gesamten Rede: " + str(self.whole["mood"]))
        for i, section_parameter in enumerate(self.sections):
            if section_parameter["mood"] != self.whole["mood"]:
                self.textStatistic.append("Die Stimmung in Abschnitt %i ist " % (i+1) + section_parameter["mood"])
        self.graphicsStatistik.plotItem.clear()
        # gib plot an self.graphicsStatistik


def start_gui_statistics():
    app = QtWidgets.QApplication(sys.argv)
    statistics_window = QtWidgets.QDialog()
    ui = Ui_statistics_window()
    ui.setupUi(statistics_window)
    statistics_window.show()
    sys.exit(app.exec_())


def open_file():
    path = QtWidgets.QFileDialog.getOpenFileName(directory="data/audioFiles")
    file = path[0].split("/")[-1]
    name = file.split(".")[0]
    file_extension = file.split(".")[1]
    if file_extension == "wav":
        pass
    elif file_extension == "avi":
        pass
    else:
        print("Format nicht analysierbar")
        return
    path_to_files = path[0].split("/" + name)[0]
    return name, path_to_files


def open_and_analyse_file():
    name, path_to_files = open_file()
    results = af.analyze_whole_and_sections(name, path_to_files)
    return results
